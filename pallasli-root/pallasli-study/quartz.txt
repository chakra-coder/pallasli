
java核心技术学习
供触发器调用的Job

package com.ibm.developerworks.quartz;
 
import java.util.Date;
 
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
 
public class SimpleQuartzJob implements Job {
 
       // 作业只需要实现job接口,execute方法中就是要执行的作业操作
       public void execute(JobExecutionContext context)
                     throws JobExecutionException {
 
              System.out.println("In SimpleQuartzJob - executing its JOB at "
                            + new Date() + " by " + context.getTrigger().getName());
              // System.out.println(context.getMergedJobDataMap().get("name"));
 
       }
 
}

 Copyright ©2011 lyt. All Rights Reserved.




java核心技术学习
任务调度器

import java.util.Date;
 
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.SimpleTrigger;
import org.quartz.impl.StdSchedulerFactory;
 
public class SimpleTriggerRunner {
 
       public static void task() throws SchedulerException {                    
              /*
               * Scheduler接口提携了所有触发器和作业，使它们协调工作。 每个Scheduler都存有JobDetail和Trigger的注册，
               * 一个Scheduler中可以注册多个JobDetail和多个Trigger，
               * 这些JobDetail和Trigger都可以通过groupname和他们自身的name加以区分
               * ，以保持这些JobDetail和Trigger的实例在同一个Scheduler内不会冲突。
               * 所以，每个Scheduler中的JobDetail的组名是唯一的
               * ，本身的名字也是唯一的（就好像是一个JobDetail的ID）。Trigger也是如此。
               */ 
              // Scheduler为任务调度器，是触发器和作业的管理容器，要创建任务调度器，需要任务调度工厂
              SchedulerFactory schedulerFactory = new StdSchedulerFactory(); 
              // 得到任务调度器
              Scheduler scheduler = schedulerFactory.getScheduler(); 
              // 获取系统时间
              long ctime = System.currentTimeMillis();
              // 创建作业对象
              JobDetail jobDetail = new JobDetail("jobDetail-s1",
                            "jobDetailGroup-s1", SimpleQuartzJob.class);
              // 创建任务触发器
              SimpleTrigger simpleTrigger = new SimpleTrigger("simpleTrigger",
                            "triggerGroup-s1");
              // 多长时间执行一次任务
              simpleTrigger.setRepeatInterval(1000); 
              // 此任务重复执行多少次
              simpleTrigger.setRepeatCount(5); 
              // 任务调度器将作业和触发器进行管理
              scheduler.scheduleJob(jobDetail, simpleTrigger);
               // 开始调度任务
              scheduler.start();
       }
 
       public static void main(String args[]) {
              try {
                     task();
              } catch (Exception ex) {
                     ex.printStackTrace();
              }
       }
}
 Copyright ©2011 lyt. All Rights Reserved.




java核心技术学习
定时任务调度器

import org.quartz.CronExpression;
import org.quartz.CronTrigger;
import org.quartz.JobDataMap;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.impl.StdSchedulerFactory;
 
public class CronTriggerRunner { 
       public static void task() throws SchedulerException { 
              SchedulerFactory schedulerFactory = new StdSchedulerFactory(); 
              Scheduler scheduler = schedulerFactory.getScheduler(); 
              long ctime = System.currentTimeMillis();
               JobDetail jobDetail = new JobDetail("jobDetail2", "jobDetailGroup2",
                            SimpleQuartzJob.class); 
              JobDataMap params = new JobDataMap();
              params.put("name", "handson");
              jobDetail.setJobDataMap(params);
               CronTrigger cronTrigger = new CronTrigger("cronTrigger",
                            "triggerGroup2");
              try {
                      CronExpression cexp = new CronExpression("0/5 * * * * ?"); 
                     cronTrigger.setCronExpression(cexp);
              } catch (Exception e) {
                     e.printStackTrace();
              } 
              scheduler.scheduleJob(jobDetail, cronTrigger); 
              scheduler.start();
       }
 
       public static void main(String args[]) {
              try {
                     task();
              } catch (Exception ex) {
                     ex.printStackTrace();
              }
       } 
}
 Copyright ©2011 lyt. All Rights Reserved.







java核心技术学习
Cron表达式

Cron表达式由6或7个由空格分隔的时间字段组成
CronExpression cexp = new CronExpression("0/5 * * * * ?");从0秒开始每隔5秒执行一次
       /*
       * 1 秒 0-59 , - * /
       * 2 分钟 0-59 , - * /
       * 3 小时 0-23, - * /
       * 4 日期1-31 , - * ? / L W C
       * 5 月份 1-12 , - * /
       * 6 星期 1-7 , - * ? / L C #
       * 7 年(可选)空值1970-2099, - * /
       */
 Cron表达式的时间字段除允许设置数值外，还可使用一些特殊的字符，提供列表、范围、通配符等功能，细说如下：
        ●星号(*)：可用在所有字段中，表示对应时间域的每一个时刻，例如，*在分钟字段时，表示“每分钟”；
        ●问号（?）：该字符只在日期和星期字段中使用，它通常指定为“无意义的值”，相当于点位符；
        ●减号(-)：表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12；
        ●逗号(,)：表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五；
        ●斜杠(/)：x/y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0/15，则表示为0,15,30和45秒，而5 /15在分钟
        字段中表示5,20,35,50，你也可以使用* /y，它等同于0/y；
        ●L：该字符只在日期和星期字段中使用，代表“Last”的意思，但它在两个字段中意思不同。L在日期字段中，表示这个月份的最后
        一天， 如一月的31号 ，非闰年二月的28号；如果L用在星期中，则表示星期六，等同于7。但是，如果L出现在星期字段里，而且
        在前面有一个数值X， 则表示“这个月的最后X天”，例如，6L表示该月的最后星期五；
        ●W：该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日。如15W表示离该月15号最近的工作日，如
        果该月15号是星期六，则匹配14号星期五；如果15日是星期日，则匹配16号星期一；如果15号是星期二，那结果就是15号星期二。
                但必须注意关联的匹配日期不能够跨月 ，如你指定1W，如果1号是星期六，结果匹配的是3号星期一，而非上个月最后的那天。
        W字符串只能指定单一日期，而不能指定日期范围；
        ●LW组合：在日期字段可以组合使用LW，它的意思是当月的最后一个工作日；
        ●井号(#)：该字符只能在星期字段中使用，表示当月某个工作日。如6#3表示当月的第三个星期五(6表示星期五，#3表示当前的第三
        个)， 而4#5表示当月的第五个星期三，假设当月没有第五个星期三，忽略不触发；
        ● C：该字符只在日期和星期字段中使用，代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于
        日历中所有日期。例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天。Cron表达式
        对特殊字符的大小写不敏感，对代表星期的缩写英文大小写也不敏感。
 
 
 下面给出一些完整的Cron表示式的实例
                     /*
                      * Cron表示式示例 表示式说明
                      * "0 0 12 * * ? " 每天12点运行
                      * "0 15 10 ? * *" 每天10:15运行
                      * "0 15 10 * * ?" 每天10:15运行
                      * "0 15 10 * * ? *" 每天10:15运行
                      * "0 15 10 * * ? 2008" 在2008年的每天10：15运行
                      * "0 * 14 * * ?" 每天14点到15点之间每分钟运行一次，开始于14:00，结束于14:59。
                      * "0 0/5 14 * * ?" 每天14点到15点每5分钟运行一次，开始于14:00，结束于14:55。
                      * "0 0/5 14,18 * * ?" 每天14点到15点每5分钟运行一次，此外每天18点到19点每5钟也运行一次。
                      * "0 0-5 14 * * ?" 每天14:00点到14:05，每分钟运行一次。
                      * "0 10,44 14 ? 3 WED" 3月每周三的14:10分到14:44，每分钟运行一次。
                      * "0 15 10 ? * MON-FRI" 每周一，二，三，四，五的10:15分运行。
                      * "0 15 10 15 * ?" 每月15日10:15分运行。
                      * "0 15 10 L * ?" 每月最后一天10:15分运行。
                      * "0 15 10 ? * 6L" 每月最后一个星期五10:15分运行。
                      * "0 15 10 ? * 6L 2007-2009" 在2007,2008,2009年每个月的最后一个星期五的10:15分运行。
                      * "0 15 10 ? * 6#3" 每月第三个星期五的10:15分运行
                      */
 Copyright ©2011 lyt. All Rights Reserved.














