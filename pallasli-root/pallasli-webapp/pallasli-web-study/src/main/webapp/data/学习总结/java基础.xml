<?xml version="1.0" encoding="UTF-8"?>

<knowledges> 
  <!--Thisis a test for dom4j -->  
  <maxId>3</maxId>  
  <knowledge> 
    <id>1</id>  
    <caption>重写(Override)</caption>  
    <content>&lt;p style="margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;重写是子类对父类的允许访问的方法的实现过程进行重新编写！返回值和形参都不能改变。即外壳不变，核心重写！&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;重写的好处在于子类可以根据需要，定义特定于自己的行为。&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;也就是说子类能够根据需要实现父类的方法。&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;在面向对象原则里，重写意味着可以重写任何现有方法。&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;&lt;/p&gt;&lt;pre&gt;Animal b = new Dog(); &amp;nbsp;&lt;span style="color: rgb(0, 0, 0); font-family: tahoma, arial, verdana, sans-serif; font-size: 12px; "&gt;引用类型&lt;/span&gt;&lt;span style="font-family: Tahoma, Arial, sans-serif; "&gt;Animal &amp;nbsp;&lt;/span&gt;&lt;span style="color: rgb(0, 0, 0); font-family: tahoma, arial, verdana, sans-serif; font-size: 12px; "&gt;指定对象的类型&lt;/span&gt;&lt;span style="font-family: Tahoma, Arial, sans-serif; "&gt;Dog&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;在编译阶段，只是检查参数的引用类型。&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;然而在运行时，Java虚拟机(JVM)指定对象的类型并且运行该对象的方法。&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;&amp;nbsp;&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;&lt;/p&gt;&lt;h2 style="margin: 0px; padding: 0px; font-size: 1em; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; "&gt;方写重写的规则&lt;/h2&gt;&lt;ul style="margin: 0px; padding: 0px; list-style: none outside none; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;参数列表必须完全与被重写方法的相同；&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;返回类型必须完全与被重写方法的返回类型相同；&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;访问权限不能比父类中被重写的方法的访问权限更高。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;父类的成员方法只能被它的子类重写。&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;声明为final的方法不能被重写。&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;声明为static的方法不能被重写，但是能够被再次声明。&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;如果一个方法不能被继承，那么该方法不能被重写。&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;构造方法不能被重写。&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;如果不能继承一个方法，则不能重写这个方法。&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;&lt;br&gt;&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;&lt;/p&gt;&lt;h2 style="margin: 0px; padding: 0px; font-size: 1em; "&gt;Super关键字的使用&lt;/h2&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;当需要在子类中调用父类的被重写方法时，要使用super关键字。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content> 
  </knowledge>  
  <knowledge> 
    <id>2</id>  
    <caption>重载(Overload)</caption>  
    <content>&lt;p style="margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型呢？可以相同也可以不同。&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;只能重载构造函数&lt;/p&gt;&lt;p style="margin: 0px; padding: 0px; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;重载规则&lt;/p&gt;&lt;ul style="margin: 0px; padding: 0px; list-style: none outside none; color: rgb(68, 68, 68); font-family: Tahoma, Arial, sans-serif; font-size: medium; "&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;被重载的方法必须改变参数列表；&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;被重载的方法可以改变返回类型；&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;被重载的方法可以改变访问修饰符；&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;被重载的方法可以声明新的或更广的检查异常；&lt;/p&gt;&lt;/li&gt;&lt;li style="margin: 0px; padding: 0px; list-style: none; "&gt;&lt;p style="margin: 0px; padding: 0px; "&gt;方法能够在同一个类中或者在一个子类中被重载&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</content> 
  </knowledge>  
  <knowledge>
    <id>3</id>
    <caption>重写与重载之间的区别</caption>
    <content>&lt;table class="reference noBorderTable" style="empty-cells: show; border-collapse: collapse; border: 0px; font-weight: bold; font-family: Tahoma, Arial, sans-serif; "&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th width="72" style="font-weight: 400; "&gt;区别点&lt;/th&gt;&lt;th width="80" style="font-weight: 400; "&gt;重载方法&lt;/th&gt;&lt;th width="340" style="font-weight: 400; "&gt;重写方法&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="72"&gt;参数列表&lt;/td&gt;&lt;td width="80"&gt;必须修改&lt;/td&gt;&lt;td width="340"&gt;一定不能修改&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="72"&gt;返回类型&lt;/td&gt;&lt;td width="80"&gt;可以修改&lt;/td&gt;&lt;td width="340"&gt;一定不能修改&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="72"&gt;异常&lt;/td&gt;&lt;td width="80"&gt;可以修改&lt;/td&gt;&lt;td width="340"&gt;可以减少或删除，一定不能抛出新的或者更广的异常&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width="72"&gt;访问&lt;/td&gt;&lt;td width="80"&gt;可以修改&lt;/td&gt;&lt;td width="340"&gt;一定不能做更严格的限制（可以降低限制）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</content>
  </knowledge>
</knowledges>
