<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.pallasli</groupId>
	<artifactId>pallasli-study-mvn-jar</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<!-- 传递依赖发现 Dependency mediation Dependency management Dependency scope 
		Excluded dependencies Optional dependencies -->
	<!-- 依赖范围 compile provided runtime test system import -->

	<!-- svn仓库 -->
	<scm>
		<url>http://www.svn.com</url>
		<connection>scm:svn:http://localhost:8080/svn/jrepo/trunk/
      Framework</connection>
		<developerConnection>scm:svn:${username}/${password}@localhost:8080:
      common_core_api:1101:code</developerConnection>
	</scm>
	<dependencies>
		<!-- 以本地lib包作为外部依赖 -->
		<dependency>
			<groupId>gson</groupId>
			<artifactId>gson</artifactId>
			<scope>system</scope>
			<version>1.4</version>
			<systemPath>${project.basedir}/src/lib/gson-1.4.jar</systemPath>
		</dependency>
	</dependencies>

	<!-- 查找次序：在 Maven 本地资源库中搜索， 在 Maven 中央存储库搜索， 在pom声明的的远程存储库搜索 -->
	<!-- 声明远程仓库 -->
	<repositories>
		<repository>
			<id>java.net</id>
			<url>https://maven.java.net/content/repositories/public/</url>
		</repository>
	</repositories>
	<build>
		<plugins>
			<!-- -->
			<plugin>
				<artifactId>maven-invoker-plugin</artifactId>
				<version>1.6</version>
				<configuration>
					<debug>true</debug>
					<pomIncludes>
						<pomInclude>app-web-ui/pom.xml</pomInclude>
						<pomInclude>app-desktop-ui/pom.xml</pomInclude>
					</pomIncludes>
				</configuration>
				<executions>
					<execution>
						<id>build</id>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Eclipse project -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<!-- Always download and attach dependencies source code -->
					<downloadSources>true</downloadSources>
					<downloadJavadocs>false</downloadJavadocs>
					<!-- Avoid type mvn eclipse:eclipse -Dwtpversion=2.0 -->
					<wtpversion>2.0</wtpversion>
				</configuration>
			</plugin>
			<!-- jetty插件 -->
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<configuration>
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<webApp>
						<contextPath>/wt-server</contextPath>
					</webApp>
					<connectors>
						<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
							<port>8888</port>
							<maxIdleTime>60000</maxIdleTime>
						</connector>
					</connectors>
				</configuration>
			</plugin>
			<!-- For Maven Tomcat Plugin -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<!-- 在部署过程中，它告诉 Maven 通过部署 WAR 文件Tomcat服务器， “http://localhost:8080/manager/text” 
						, 在路径“/yiibaiWebApp“上, 使用 “TomcatServer” (settings.xml) 用户名和密码来进行认证。 <url>http://localhost:8080/manager/text</url> 
						<server>TomcatServer</server> -->
					<path>/CounterWebApp</path>
				</configuration>
			</plugin>
			<!-- 添加编译器插件来告诉 Maven 使用哪个 JDK 版本是用来编译项目 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<!-- 发布项目插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.0-beta-9</version>
				<configuration>
					<useReleaseProfile>false</useReleaseProfile>
					<goals>deploy</goals>
					<scmCommentPrefix>[bus-core-api-release-checkin]-</scmCommentPrefix>
				</configuration>
			</plugin>
			<!-- 自动化部署插件 -->
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>1.0</version>
				<configuration>
					<container>
						<containerId>tomcat7x</containerId>
						<home>/Users/lyt1987Desktop/mypcsoft/apache-tomcat-7.0.59</home>
					</container>
					<configuration>
						<type>standalone</type>
						<home>/Users/lyt1987/Documents/tomcat7x</home>
					</configuration>
				</configuration>
			</plugin>
			
			<!-- 测试报表插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<!-- 是否跳过测试 -->
					<skipTests>false</skipTests>
					<!-- 添加自定义测试支持，默认Test开头结尾的类和TestCase结尾的类 -->
					<includes>
						<include>**/*Testkk.java</include>
					</includes>
					<!-- 排除测试 -->
					<excludes>
						<exclude>**/*ServiceTest.java</exclude>
					</excludes>
					<reportsDirectory>/Users/lyt1987/Documents/test-reports</reportsDirectory>
				</configuration>
			</plugin>
		</plugins>
		<!-- 使用wagon部署网站 <extensions> <extension> <groupId>org.apache.maven.wagon</groupId> 
			<artifactId>wagon-webdav-jackrabbit</artifactId> <version>1.0-beta-7</version> 
			</extension> </extensions> -->
		<!-- 打包项目名称 -->
		<finalName>CounterWebApp</finalName>
	</build>
	<!-- 配置在 “distributionManagement” 标签部署你的网站。 -->
	<distributionManagement>
		<repository>
			<id>Core-API-Java-Release</id>
			<name>Release repository</name>
			<url>http://localhost:8081/nexus/content/repositories/Core-Api-Release</url>
		</repository>
		<site>
			<id>yiibaiserver</id>
			<url>dav:http://127.0.0.1/sites/</url>
		</site>
	</distributionManagement>
</project>