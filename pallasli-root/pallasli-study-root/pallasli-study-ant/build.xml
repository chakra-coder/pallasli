<?xml version="1.0"?>
<!--
name The Name of the project. (Optional)
default	The default target for the build script. A project may contain any number of targets. This attribute specifies which target should be considered as the default. (Mandatory)
basedir	The base directory (or) the root folder for the project. (Optional)
-->
<project name="Hello World Project" default="info">
	
	
	<!--
	ant.file	The full location of the build file.
	ant.version	The version of the Apache Ant installation.
	basedir	The basedir of the build, as specified in the basedir attribute of theproject element.
	ant.java.version	The version of the JDK that is used by Ant.
	ant.project.name	The name of the project, as specified in the name atrribute of theproject element
	ant.project.default-target	The default target of the current project
	ant.project.invoked-targets	Comma separated list of the targets that were invoked in the current project
	ant.core.lib	The full location of the ant jar file
	ant.home	The home directory of Ant installation
	ant.library.dir	The home directory for Ant library files - typically ANT_HOME/lib folder.
	-->
	<property file="build.properties"/>
	<property name="sitename" value="www.yiibai.com"/>
	
	<fileset dir="${src}" casesensitive="yes">
	  <include name="**/*.java"/>
	  <exclude name="**/*Stub*"/>
	</fileset>
	<patternset id="java.files.without.stubs">
	  <include name="src/**/*.java"/>
	  <exclude name="src/**/*Stub*"/>
	</patternset>
	<fileset dir="${src}" casesensitive="yes">
	  <patternset refid="java.files.without.stubs"/>
	 </fileset>
	<filelist id="config.files" dir="${webapp.src.folder}">
	  <file name="applicationConfig.xml"/>
	  <file name="faces-config.xml"/>
	  <file name="web.xml"/>
	  <file name="portlet.xml"/>
	</filelist>
	<copy todir="${output.dir}">
	  <fileset dir="${releasenotes.dir}" includes="**/*.txt"/>
	  <filterset>
	    <filter token="VERSION" value="${current.version}"/>
	  </filterset>
	</copy>
	<path id="build.classpath.jar">
	  <pathelement path="${env.J2EE_HOME}/${j2ee.jar}"/>
	  <fileset dir="lib">
	      <include name="**/*.jar"/>
	  </fileset>
	</path>
	
	<!--
	name The name of the target (Required)
	depends	Comma separated list of all targets that this target depends on. (Optional)
	description	A short description of the target. (optional)
	if	Allows the execution of a target based on the trueness of a conditional attribute. (optional)
	unless	Adds the target to the dependency list of the specified Extension Point. An Extension Point is similar to a target, but it does not have any tasks. (Optional)
	-->
	<target name="info">
		<echo>Hello World - Welcome to Apache Ant!</echo>
	</target>
	
	
	
	<path id="master-classpath">
	        <fileset dir="${web.dir}/WEB-INF/lib">
	            <include name="*.jar"/>
	        </fileset>
	        <pathelement path="${build.dir}"/>
	    </path>
 
	 
	    <target name="clean" description="Clean output directories">
	        <delete>
	            <fileset dir="${build.dir}">
	                <include name="**/*.class"/>
	            </fileset>
	        </delete>
	    </target>
	<target name="generate-javadoc">
	    <javadoc packagenames="faxapp.*" sourcepath="${src.dir}" 
	        destdir="doc" version="true" windowtitle="Fax Application">
	      <doctitle><![CDATA[= Fax Application =]]></doctitle>
	      <bottom>
	         <![CDATA[Copyright © 2011. All Rights Reserved.]]>
	      </bottom>
	      <group title="util packages" packages="faxapp.util.*"/>
	      <group title="web packages" packages="faxapp.web.*"/>
	      <group title="data packages" 
	                          packages="faxapp.entity.*:faxapp.dao.*"/>
	    </javadoc>
	    <echo message="java doc has been generated!" />
	</target>
	
	<!--
	
	basedir	The base directory for the output JAR file. By default, this is set to the base directory of the project.
compress	Advises ant to compress the file as it creates the JAR file.
keepcompression	While the compress attribute is applicable to the individual files, thekeepcompression attribute does the same thing, but it applies to the entire archive.
destfile	The name of the output JAR file
duplicate	Advises Ant on what to do when duplicate files are found. You could add, preserve or fail the duplicate files.
excludes	Advises Ant to not include these comma separated list of files in the package.
excludesfile	Same as above, except the exclude files are specified using a pattern.
inlcudes	Inverse of excludes
includesfile	Inverse of excludesfile.
update	Advises ant to overwrite files in the already built JAR file.
	
	-->
	<target name="build-jar">
	<jar destfile="${web.dir}/lib/util.jar"
	     basedir="${build.dir}/classes"
	     includes="faxapp/util/**"
	     excludes="**/Test.class">
	     <manifest>
	      <attribute name="Main-Class" value="com.yiibai.util.FaxUtil"/>
	     </manifest>
	</jar>
	</target>
	
	
	
	<!--
	
	webxml	Path to the web.xml file
lib	A grouping to specify what goes into the WEB-INFlib folder.
classes	A grouping to specify what goes into the WEB-INFclasses folder.
metainf	Specifies the instructions for generating the MANIFEST.MF file.
	-->
	<target name="build-war">
	   <war destfile="fax.war" webxml="${web.dir}/web.xml">
	   <fileset dir="${web.dir}/WebContent">
	      <include name="**/*.*"/>
	   </fileset>
	   <lib dir="thirdpartyjars">
	      <exclude name="portlet.jar"/>
	   </lib>
	   <classes dir="${build.dir}/web"/>
	</war>
	</target>
	
	

    <target name="usage">
        <echo message=""/>
        <echo message="${name} build file"/>
        <echo message="-----------------------------------"/>
        <echo message=""/>
        <echo message="Available targets are:"/>
        <echo message=""/>
        <echo message="deploy    --> Deploy application 
          as directory"/>
        <echo message="deploywar --> Deploy application 
          as a WAR file"/>
        <echo message=""/>
    </target>

    <target name="build" description="Compile main 
      source tree java files">
        <mkdir dir="${build.dir}"/>
        <javac destdir="${build.dir}" source="1.5" 
          target="1.5" debug="true"
          deprecation="false" optimize="false" failonerror="true">
            <src path="${src.dir}"/>
            <classpath refid="master-classpath"/>
        </javac>
    </target>

    <target name="deploy" depends="build" 
      description="Deploy application">
        <copy todir="${deploy.path}/${name}" 
          preservelastmodified="true">
            <fileset dir="${web.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>
    </target>

    <target name="deploywar" depends="build" 
      description="Deploy application as a WAR file">
        <war destfile="${name}.war"
             webxml="${web.dir}/WEB-INF/web.xml">
            <fileset dir="${web.dir}">
                <include name="**/*.*"/>
            </fileset>
        </war>
        <copy todir="${deploy.path}" preservelastmodified="true">
            <fileset dir=".">
                <include name="*.war"/>
            </fileset>
        </copy>
    </target>
    
 
	<!-- ============================================================ -->
	    <!-- Tomcat tasks -->
	    <!-- ============================================================ -->

	    <path id="catalina-ant-classpath">
	        <!-- We need the Catalina jars for Tomcat -->
	        <!--  * for other app servers - check the docs -->
	        <fileset dir="${appserver.lib}">
	            <include name="catalina-ant.jar"/>
	        </fileset>
	    </path>

	    <taskdef name="install" 
	        classname="org.apache.catalina.ant.InstallTask">
	        <classpath refid="catalina-ant-classpath"/>
	    </taskdef>
	    <taskdef name="reload" 
	        classname="org.apache.catalina.ant.ReloadTask">
	        <classpath refid="catalina-ant-classpath"/>
	    </taskdef>
	    <taskdef name="list" 
	        classname="org.apache.catalina.ant.ListTask">
	        <classpath refid="catalina-ant-classpath"/>
	    </taskdef>
	    <taskdef name="start" 
	        classname="org.apache.catalina.ant.StartTask">
	        <classpath refid="catalina-ant-classpath"/>
	    </taskdef>
	    <taskdef name="stop" 
	         classname="org.apache.catalina.ant.StopTask">
	        <classpath refid="catalina-ant-classpath"/>
	    </taskdef>

	    <target name="reload" description="Reload application in Tomcat">
	        <reload url="${tomcat.manager.url}"
	                 username="${tomcat.manager.username}"
	                 password="${tomcat.manager.password}"
	                 path="/${name}"/>
	    </target>
	
	
	<!--执行java代码-->
	<target name="notify">
	    <java fork="true" failonerror="yes" classname="NotifyAdministrator">
	      <arg line="admin@test.com"/>
	    </java>
	  </target>
	
	<!--junit集成
	
	dir	Where to invoke the VM from. This is ignored when fork is disabled.
jvm	Command used to invoke the JVM. This is ignored when fork is disabled.
fork	Runs the test in a separate JVM
errorproperty	The name of the property to set if there is a Junit error
failureproperty	The name of the property to set if there is a Junit failure
haltonerror	Stops execution when a test error occurs
haltonfailure	Stops execution when a failure occurs
printsummary	Advices Ant to display simple statistics for each test
showoutput	Adivces Ant tosend the output to its logs and formatters
tempdir	Path to the temporary file that Ant will use
timeout	Exits the tests that take longer to run than this setting (in milliseconds).
	-->
	<target name="unittest">
	  <junit haltonfailure="true" printsummary="true">
	    <test name="com.yiibai.UtilsTest"/>
	  </junit>
	</target>
	<target name="uploadbuild" description="Upload build to an FTP server">
	<!-- Upload everything under the destination.dir to the FTP server. -->
	<ftp server="${ftp.hostname}" remotedir="/" userid="${ftp.username}" 
	   password="${ftp.userpassword}" separator="\" verbose="yes" binary="yes">
	<fileset dir="${destination.dir}">
	<include name="**/*.*" />
	</fileset>
	</ftp>
	</target>
	<target name="notifyteam" description="Notify testing team of the new build">
	<!-- Read build information from the build.info file. -->
	<property file="${destination.dir}/build.info" />
	<!-- Send a mail to the testing team. -->
	<mail mailhost="${smtp.hostname}" mailport="${smtp.hostport}"
	 subject="Test build #${build.number}" 
	   from="${smtp.from}" tolist="${smtp.tolist}">
	<message>The build #${build.number} is now available for testing.</message>
	</mail>
	</target>
</project>