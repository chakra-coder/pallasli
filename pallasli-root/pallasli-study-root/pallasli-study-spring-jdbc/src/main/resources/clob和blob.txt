 spring定义了一个以统一的方式操作各种数据库的Lob类型数据的LobCreator(保存的时候用),同时提供了一个LobHandler为操作二进制字段和大文本字段提供统一接口访问。 
 
 
 
 <bean id="nativeJdbcExtractor"  
 class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"  
      lazy-init="true"/>  
  
<bean id="lobHandler"  
 class="org.springframework.jdbc.support.lob.OracleLobHandler"  
        lazy-init="true"  
        p:nativeJdbcExtractor-ref="nativeJdbcExtractor"/>  
  
<bean id="defaultLobHandler"  
   class="org.springframework.jdbc.support.lob.DefaultLobHandler"  
   lazy-init="true" />  
  
<bean id="jdbcTemplate"  
class="org.springframework.jdbc.core.JdbcTemplate"  
        p:dataSource-ref="appDS"  
        p:nativeJdbcExtractor-ref="nativeJdbcExtractor"/>  
             
<bean id="txMangager"  
 class="org.springframework.jdbc.datasource.DataSourceTransactionManager"  
        p:dataSource-ref="appDS"/>  
  
<tx:annotation-driven transaction-manager="txMangager" proxy-target-class="true"/> 






@Resource(name = "lobHandler")      
private LobHandler lobHandler;      
     
@Resource(name = "jdbcTemplate")      
private  JdbcTemplate jdbcTemplate;      
     
public void savePost(final Post post) {        
   String sql = " INSERT INTO t_post(post_id,user_id,post_text,post_attach)"     
     + " VALUES(?,?,?,?)";      
   jdbcTemplate().execute(sql,      
     new AbstractLobCreatingPreparedStatementCallback(this.lobHandler) {      
         protected void setValues(PreparedStatement ps,      
              LobCreator lobCreator) throws SQLException {      
                  ps.setInt(1, incre.nextIntValue());       
                  ps.setInt(2, post.getUserId());       
                  lobCreator.setClobAsString(ps, 3, post.getPostText());      
                  lobCreator.setBlobAsBytes(ps, 4, post.getPostAttach());      
        }   
     });      
}      
     
public List findAttachs(final int userId){      
   String sql = "SELECT post_id,post_attach FROM t_post where user_id =? and post_attach is not null";      
   return jdbcTemplate().query( sql, new Object[] {userId},      
      new RowMapper() {      
          public Object mapRow(ResultSet rs, int rowNum) throws SQLException {      
          Post post = new Post();      
          int postId = rs.getInt(1);      
          byte[] attach = lobHandler.getBlobAsBytes(rs, 2);      
          post.setPostId(postId);      
          post.setPostAttach(attach);      
          return post;      
      }     
   });     
}    

